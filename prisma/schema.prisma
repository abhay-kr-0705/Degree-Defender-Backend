// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Add seed configuration
generator seed {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  SUPER_ADMIN
  UNIVERSITY_ADMIN
  VERIFIER
  STUDENT
  PUBLIC
}

enum CertificateStatus {
  PENDING
  VERIFIED
  REJECTED
  FLAGGED
  EXPIRED
}

enum VerificationStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  SUSPICIOUS
}

enum InstitutionType {
  UNIVERSITY
  COLLEGE
  TECHNICAL_INSTITUTE
  GOVERNMENT_BODY
  PRIVATE_INSTITUTE
}

enum CertificateType {
  DEGREE
  DIPLOMA
  CERTIFICATE
  MARKSHEET
  TRANSCRIPT
  OTHER
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  role              UserRole           @default(PUBLIC)
  isActive          Boolean            @default(true)
  emailVerified     Boolean            @default(false)
  phoneVerified     Boolean            @default(false)
  lastLogin         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  institution       Institution?       @relation(fields: [institutionId], references: [id])
  institutionId     String?
  verifications     Verification[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  
  @@map("users")
}

model Institution {
  id                String             @id @default(cuid())
  name              String
  code              String             @unique
  type              InstitutionType
  address           String
  city              String
  state             String
  pincode           String
  phone             String
  email             String
  website           String?
  establishedYear   Int
  isActive          Boolean            @default(true)
  isVerified        Boolean            @default(false)
  apiKey            String?            @unique
  integrationConfig Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  users             User[]
  certificates      Certificate[]
  verifications     Verification[]
  
  @@map("institutions")
}

model Certificate {
  id                String             @id @default(cuid())
  certificateNumber String             @unique
  studentName       String
  fatherName        String?
  motherName        String?
  rollNumber        String?
  registrationNumber String?
  course            String
  branch            String?
  passingYear       Int
  grade             String?
  cgpa              Float?
  percentage        Float?
  dateOfIssue       DateTime
  dateOfCompletion  DateTime?
  type              CertificateType
  status            CertificateStatus  @default(PENDING)
  
  // File and OCR data
  originalFileName  String?
  filePath          String?
  fileHash          String?
  ocrText           String?
  ocrConfidence     Float?
  extractedData     Json?
  
  // Blockchain data
  blockchainHash    String?            @unique
  qrCode            String?
  digitalSignature  String?
  
  // Verification metadata
  isLegacy          Boolean            @default(false)
  verificationCount Int                @default(0)
  lastVerified      DateTime?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  institution       Institution        @relation(fields: [institutionId], references: [id])
  institutionId     String
  verifications     Verification[]
  anomalies         Anomaly[]
  
  @@map("certificates")
}

model Verification {
  id                String             @id @default(cuid())
  verificationCode  String             @unique @default(cuid())
  status            VerificationStatus @default(IN_PROGRESS)
  requestedBy       String             // Organization/Person requesting verification
  requestorEmail    String
  requestorPhone    String?
  purpose           String?
  
  // Verification results
  isValid           Boolean?
  confidenceScore   Float?
  verificationNotes String?
  flaggedReasons    String[]
  
  // Metadata
  ipAddress         String?
  userAgent         String?
  verifiedAt        DateTime?
  expiresAt         DateTime?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  certificate       Certificate        @relation(fields: [certificateId], references: [id])
  certificateId     String
  verifiedBy        User?              @relation(fields: [verifiedById], references: [id])
  verifiedById      String?
  institution       Institution?       @relation(fields: [institutionId], references: [id])
  institutionId     String?
  
  @@map("verifications")
}

model Anomaly {
  id                String             @id @default(cuid())
  type              String             // TAMPERED_GRADE, FORGED_SEAL, INVALID_NUMBER, etc.
  severity          String             // LOW, MEDIUM, HIGH, CRITICAL
  description       String
  detectionMethod   String             // OCR, AI, MANUAL, BLOCKCHAIN
  confidence        Float
  metadata          Json?
  
  createdAt         DateTime           @default(now())
  
  // Relations
  certificate       Certificate        @relation(fields: [certificateId], references: [id])
  certificateId     String
  
  @@map("anomalies")
}

model AuditLog {
  id                String             @id @default(cuid())
  action            String
  resource          String
  resourceId        String?
  oldValues         Json?
  newValues         Json?
  ipAddress         String?
  userAgent         String?
  
  createdAt         DateTime           @default(now())
  
  // Relations
  user              User?              @relation(fields: [userId], references: [id])
  userId            String?
  
  @@map("audit_logs")
}

model Notification {
  id                String             @id @default(cuid())
  type              String             // EMAIL, SMS, SYSTEM
  title             String
  message           String
  isRead            Boolean            @default(false)
  sentAt            DateTime?
  
  createdAt         DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  
  @@map("notifications")
}

model SystemConfig {
  id                String             @id @default(cuid())
  key               String             @unique
  value             String
  description       String?
  isActive          Boolean            @default(true)
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@map("system_config")
}

model BlacklistedEntity {
  id                String             @id @default(cuid())
  type              String             // INSTITUTION, CERTIFICATE, USER, IP
  identifier        String
  reason            String
  isActive          Boolean            @default(true)
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@map("blacklisted_entities")
}

// Global indexes are not supported in Prisma
// Indexes are defined within each model block
